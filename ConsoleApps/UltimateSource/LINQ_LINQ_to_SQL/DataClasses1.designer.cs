#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQ_LINQ_to_SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DonutOrdering")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomerDonutOrder(CustomerDonutOrder instance);
    partial void UpdateCustomerDonutOrder(CustomerDonutOrder instance);
    partial void DeleteCustomerDonutOrder(CustomerDonutOrder instance);
    partial void InsertDonut(Donut instance);
    partial void UpdateDonut(Donut instance);
    partial void DeleteDonut(Donut instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LINQ_LINQ_to_SQL.Properties.Settings.Default.DonutOrderingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustomerDonutOrder> CustomerDonutOrders
		{
			get
			{
				return this.GetTable<CustomerDonutOrder>();
			}
		}
		
		public System.Data.Linq.Table<Donut> Donuts
		{
			get
			{
				return this.GetTable<Donut>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _Street;
		
		private string _Apt;
		
		private string _City;
		
		private string _State;
		
		private int _Zip;
		
		private string _HomePhone;
		
		private string _MobilePhone;
		
		private string _OtherPhone;
		
		private EntitySet<CustomerDonutOrder> _CustomerDonutOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnAptChanging(string value);
    partial void OnAptChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(int value);
    partial void OnZipChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnOtherPhoneChanging(string value);
    partial void OnOtherPhoneChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerDonutOrders = new EntitySet<CustomerDonutOrder>(new Action<CustomerDonutOrder>(this.attach_CustomerDonutOrders), new Action<CustomerDonutOrder>(this.detach_CustomerDonutOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apt", DbType="VarChar(50)")]
		public string Apt
		{
			get
			{
				return this._Apt;
			}
			set
			{
				if ((this._Apt != value))
				{
					this.OnAptChanging(value);
					this.SendPropertyChanging();
					this._Apt = value;
					this.SendPropertyChanged("Apt");
					this.OnAptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="Int NOT NULL")]
		public int Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherPhone", DbType="VarChar(50)")]
		public string OtherPhone
		{
			get
			{
				return this._OtherPhone;
			}
			set
			{
				if ((this._OtherPhone != value))
				{
					this.OnOtherPhoneChanging(value);
					this.SendPropertyChanging();
					this._OtherPhone = value;
					this.SendPropertyChanged("OtherPhone");
					this.OnOtherPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerDonutOrder", Storage="_CustomerDonutOrders", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CustomerDonutOrder> CustomerDonutOrders
		{
			get
			{
				return this._CustomerDonutOrders;
			}
			set
			{
				this._CustomerDonutOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerDonutOrders(CustomerDonutOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerDonutOrders(CustomerDonutOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerDonutOrder")]
	public partial class CustomerDonutOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DonutOrderID;
		
		private int _CustomerID;
		
		private int _DonutID;
		
		private System.DateTime _DonutOrderTimestamp;
		
		private System.Nullable<int> _OrderQty;
		
		private string _SpecialNotes;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDonutOrderIDChanging(int value);
    partial void OnDonutOrderIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnDonutIDChanging(int value);
    partial void OnDonutIDChanged();
    partial void OnDonutOrderTimestampChanging(System.DateTime value);
    partial void OnDonutOrderTimestampChanged();
    partial void OnOrderQtyChanging(System.Nullable<int> value);
    partial void OnOrderQtyChanged();
    partial void OnSpecialNotesChanging(string value);
    partial void OnSpecialNotesChanged();
    #endregion
		
		public CustomerDonutOrder()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DonutOrderID
		{
			get
			{
				return this._DonutOrderID;
			}
			set
			{
				if ((this._DonutOrderID != value))
				{
					this.OnDonutOrderIDChanging(value);
					this.SendPropertyChanging();
					this._DonutOrderID = value;
					this.SendPropertyChanged("DonutOrderID");
					this.OnDonutOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutID", DbType="Int NOT NULL")]
		public int DonutID
		{
			get
			{
				return this._DonutID;
			}
			set
			{
				if ((this._DonutID != value))
				{
					this.OnDonutIDChanging(value);
					this.SendPropertyChanging();
					this._DonutID = value;
					this.SendPropertyChanged("DonutID");
					this.OnDonutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutOrderTimestamp", DbType="DateTime NOT NULL")]
		public System.DateTime DonutOrderTimestamp
		{
			get
			{
				return this._DonutOrderTimestamp;
			}
			set
			{
				if ((this._DonutOrderTimestamp != value))
				{
					this.OnDonutOrderTimestampChanging(value);
					this.SendPropertyChanging();
					this._DonutOrderTimestamp = value;
					this.SendPropertyChanged("DonutOrderTimestamp");
					this.OnDonutOrderTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderQty", DbType="Int")]
		public System.Nullable<int> OrderQty
		{
			get
			{
				return this._OrderQty;
			}
			set
			{
				if ((this._OrderQty != value))
				{
					this.OnOrderQtyChanging(value);
					this.SendPropertyChanging();
					this._OrderQty = value;
					this.SendPropertyChanged("OrderQty");
					this.OnOrderQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialNotes", DbType="VarChar(500)")]
		public string SpecialNotes
		{
			get
			{
				return this._SpecialNotes;
			}
			set
			{
				if ((this._SpecialNotes != value))
				{
					this.OnSpecialNotesChanging(value);
					this.SendPropertyChanging();
					this._SpecialNotes = value;
					this.SendPropertyChanged("SpecialNotes");
					this.OnSpecialNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerDonutOrder", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerDonutOrders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerDonutOrders.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Donut")]
	public partial class Donut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DonutID;
		
		private string _DonutName;
		
		private string _DonutDescription;
		
		private string _DonutSize;
		
		private decimal _DonutPrice;
		
		private string _DonutPhotoID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDonutIDChanging(int value);
    partial void OnDonutIDChanged();
    partial void OnDonutNameChanging(string value);
    partial void OnDonutNameChanged();
    partial void OnDonutDescriptionChanging(string value);
    partial void OnDonutDescriptionChanged();
    partial void OnDonutSizeChanging(string value);
    partial void OnDonutSizeChanged();
    partial void OnDonutPriceChanging(decimal value);
    partial void OnDonutPriceChanged();
    partial void OnDonutPhotoIDChanging(string value);
    partial void OnDonutPhotoIDChanged();
    #endregion
		
		public Donut()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DonutID
		{
			get
			{
				return this._DonutID;
			}
			set
			{
				if ((this._DonutID != value))
				{
					this.OnDonutIDChanging(value);
					this.SendPropertyChanging();
					this._DonutID = value;
					this.SendPropertyChanged("DonutID");
					this.OnDonutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DonutName
		{
			get
			{
				return this._DonutName;
			}
			set
			{
				if ((this._DonutName != value))
				{
					this.OnDonutNameChanging(value);
					this.SendPropertyChanging();
					this._DonutName = value;
					this.SendPropertyChanged("DonutName");
					this.OnDonutNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutDescription", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string DonutDescription
		{
			get
			{
				return this._DonutDescription;
			}
			set
			{
				if ((this._DonutDescription != value))
				{
					this.OnDonutDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DonutDescription = value;
					this.SendPropertyChanged("DonutDescription");
					this.OnDonutDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutSize", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DonutSize
		{
			get
			{
				return this._DonutSize;
			}
			set
			{
				if ((this._DonutSize != value))
				{
					this.OnDonutSizeChanging(value);
					this.SendPropertyChanging();
					this._DonutSize = value;
					this.SendPropertyChanged("DonutSize");
					this.OnDonutSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutPrice", DbType="Decimal(8,2) NOT NULL")]
		public decimal DonutPrice
		{
			get
			{
				return this._DonutPrice;
			}
			set
			{
				if ((this._DonutPrice != value))
				{
					this.OnDonutPriceChanging(value);
					this.SendPropertyChanging();
					this._DonutPrice = value;
					this.SendPropertyChanged("DonutPrice");
					this.OnDonutPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonutPhotoID", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string DonutPhotoID
		{
			get
			{
				return this._DonutPhotoID;
			}
			set
			{
				if ((this._DonutPhotoID != value))
				{
					this.OnDonutPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._DonutPhotoID = value;
					this.SendPropertyChanged("DonutPhotoID");
					this.OnDonutPhotoIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
